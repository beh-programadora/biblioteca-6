import tkinter as tk
from tkinter import messagebox, ttk
import sqlite3
import re

class BibliotecaApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Sistema de Biblioteca")
        self.criar_tabelas()
        self.criar_widgets()
        self.carregar_autores()
        self.carregar_livros()
        self.carregar_livros_nao_devolvidos()
        self.carregar_emprestimos_ordenados()

    def conectar_db(self):
        return sqlite3.connect('biblioteca.db')

    def criar_tabelas(self):
        with self.conectar_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS Autores (
                    AutorID INTEGER PRIMARY KEY AUTOINCREMENT,
                    Nome TEXT NOT NULL,
                    Nacionalidade TEXT
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS Livros (
                    LivroID INTEGER PRIMARY KEY AUTOINCREMENT,
                    Titulo TEXT NOT NULL,
                    AutorID INTEGER,
                    AnoPublicacao INTEGER,
                    Genero TEXT,
                    Status TEXT DEFAULT 'Disponível',
                    FOREIGN KEY (AutorID) REFERENCES Autores(AutorID)
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS Emprestimos (
                    EmprestimoID INTEGER PRIMARY KEY AUTOINCREMENT,
                    LivroID INTEGER,
                    DataEmprestimo TEXT,
                    DataDevolucao TEXT,
                    NomeUsuario TEXT,
                    Telefone TEXT,
                    FOREIGN KEY (LivroID) REFERENCES Livros(LivroID)
                )
            ''')

    def executar_consulta(self, consulta, params=()):
        try:
            with self.conectar_db() as conn:
                cursor = conn.cursor()
                cursor.execute(consulta, params)
                conn.commit()
                return cursor.fetchall()
        except sqlite3.Error as e:
            self.mostrar_mensagem("Erro de Banco de Dados", str(e))

    def adicionar_autor(self):
        nome = self.nome_entry.get().strip()
        nacionalidade = self.nacionalidade_entry.get().strip()

        if nome and nacionalidade:
            self.executar_consulta('INSERT INTO Autores (Nome, Nacionalidade) VALUES (?, ?)', (nome, nacionalidade))
            self.mostrar_mensagem("Sucesso", "Autor adicionado com sucesso!")
            self.limpar_campos()
            self.carregar_autores()
        else:
            self.mostrar_mensagem("Atenção", "Todos os campos devem ser preenchidos.")

    def adicionar_livro(self):
        titulo = self.titulo_entry.get().strip()
        autor_id = self.autor_combobox.get()
        ano_publicacao = self.ano_entry.get().strip()
        genero = self.genero_entry.get().strip()

        if titulo and autor_id and ano_publicacao.isdigit() and genero:
            autor_id = int(autor_id.split(" (ID: ")[1][:-1])
            self.executar_consulta(
                'INSERT INTO Livros (Titulo, AutorID, AnoPublicacao, Genero) VALUES (?, ?, ?, ?)',
                (titulo, autor_id, int(ano_publicacao), genero)
            )
            self.mostrar_mensagem("Sucesso", "Livro adicionado com sucesso!")
            self.limpar_campos()
            self.carregar_livros()
        else:
            self.mostrar_mensagem("Atenção", "Todos os campos devem ser preenchidos corretamente.")

    def registrar_emprestimo(self):
        livro_id = self.livro_combobox.get()
        data_emprestimo = self.data_emprestimo_entry.get().strip()
        nome_usuario = self.nome_usuario_entry.get().strip()
        telefone = self.telefone_entry.get().strip()

        if livro_id and data_emprestimo and nome_usuario and telefone:
            if re.match(r'\d{2}/\d{2}/\d{4}', data_emprestimo):
                livro_id = int(livro_id.split(" (ID: ")[1][:-1])
                self.executar_consulta(
                    'INSERT INTO Emprestimos (LivroID, DataEmprestimo, NomeUsuario, Telefone) VALUES (?, ?, ?, ?)',
                    (livro_id, data_emprestimo, nome_usuario, telefone)
                )
                self.executar_consulta(
                    'UPDATE Livros SET Status = ? WHERE LivroID = ?', ('Emprestado', livro_id)
                )
                self.mostrar_mensagem("Sucesso", "Empréstimo registrado com sucesso!")
                self.limpar_campos()
                self.carregar_livros()
                self.carregar_livros_nao_devolvidos()
            else:
                self.mostrar_mensagem("Atenção", "Data deve estar no formato DD/MM/AAAA.")
        else:
            self.mostrar_mensagem("Atenção", "Todos os campos devem ser preenchidos.")

    def devolver_livro(self):
        livro_id = self.livro_combobox.get()

        if livro_id:
            livro_id = int(livro_id.split(" (ID: ")[1][:-1])
            emprestimo = self.executar_consulta('SELECT EmprestimoID, NomeUsuario FROM Emprestimos WHERE LivroID = ?', (livro_id,))

            if emprestimo:
                usuario_nome = emprestimo[0][1]  # Nome do usuário que emprestou
                if messagebox.askyesno("Confirmação", f"Você realmente deseja devolver este livro emprestado por {usuario_nome}?"):
                    self.executar_consulta('DELETE FROM Emprestimos WHERE LivroID = ?', (livro_id,))
                    self.executar_consulta('UPDATE Livros SET Status = ? WHERE LivroID = ?', ('Disponível', livro_id))
                    self.mostrar_mensagem("Sucesso", "Livro devolvido com sucesso!")
                    self.carregar_livros()
                    self.carregar_livros_nao_devolvidos()
                else:
                    self.mostrar_mensagem("Atenção", "Devolução cancelada.")
            else:
                self.mostrar_mensagem("Atenção", "Este livro não está emprestado.")
        else:
            self.mostrar_mensagem("Atenção", "Selecione um livro.")

    def carregar_autores(self):
        autores = self.executar_consulta('SELECT AutorID, Nome FROM Autores ORDER BY Nome')
        self.autor_combobox['values'] = [f"{nome} (ID: {autor_id})" for autor_id, nome in autores]

    def carregar_livros(self):
        livros = self.executar_consulta('SELECT LivroID, Titulo FROM Livros ORDER BY Titulo')
        self.livro_combobox['values'] = [f"{titulo} (ID: {livro_id})" for livro_id, titulo in livros]

    def carregar_livros_nao_devolvidos(self):
        livros_nao_devolvidos = self.executar_consulta('''
            SELECT Livros.LivroID, Livros.Titulo, Emprestimos.NomeUsuario, Emprestimos.Telefone 
            FROM Emprestimos 
            JOIN Livros ON Livros.LivroID = Emprestimos.LivroID
        ''')
        self.livros_nao_devolvidos_listbox.delete(0, tk.END)
        for livro_id, titulo, nome_usuario, telefone in livros_nao_devolvidos:
            self.livros_nao_devolvidos_listbox.insert(tk.END, f"{titulo} (ID: {livro_id}) - Emprestado por {nome_usuario}, Telefone: {telefone}")

    def carregar_emprestimos_ordenados(self):
        emprestimos = self.executar_consulta('SELECT Livros.Titulo, Emprestimos.DataEmprestimo FROM Emprestimos JOIN Livros ON Livros.LivroID = Emprestimos.LivroID ORDER BY Emprestimos.DataEmprestimo')
        for livro, data in emprestimos:
            print(f"Livro: {livro}, Data de Empréstimo: {data}")

    def criar_widgets(self):
        # Criação dos widgets
        tk.Label(self.root, text="Nome do Autor:").grid(row=0, column=0)
        self.nome_entry = tk.Entry(self.root)
        self.nome_entry.grid(row=0, column=1)

        tk.Label(self.root, text="Nacionalidade:").grid(row=1, column=0)
        self.nacionalidade_entry = tk.Entry(self.root)
        self.nacionalidade_entry.grid(row=1, column=1)

        tk.Button(self.root, text="Adicionar Autor", command=self.adicionar_autor).grid(row=2, column=0, columnspan=2)

        tk.Label(self.root, text="Título do Livro:").grid(row=3, column=0)
        self.titulo_entry = tk.Entry(self.root)
        self.titulo_entry.grid(row=3, column=1)

        tk.Label(self.root, text="Autor:").grid(row=4, column=0)
        self.autor_combobox = ttk.Combobox(self.root)
        self.autor_combobox.grid(row=4, column=1)

        tk.Label(self.root, text="Ano de Publicação:").grid(row=5, column=0)
        self.ano_entry = tk.Entry(self.root)
        self.ano_entry.grid(row=5, column=1)

        tk.Label(self.root, text="Gênero:").grid(row=6, column=0)
        self.genero_entry = tk.Entry(self.root)
        self.genero_entry.grid(row=6, column=1)

        tk.Button(self.root, text="Adicionar Livro", command=self.adicionar_livro).grid(row=7, column=0, columnspan=2)

        tk.Label(self.root, text="Livro para Empréstimo:").grid(row=8, column=0)
        self.livro_combobox = ttk.Combobox(self.root)
        self.livro_combobox.grid(row=8, column=1)

        tk.Label(self.root, text="Data de Empréstimo (DD/MM/AAAA):").grid(row=9, column=0)
        self.data_emprestimo_entry = tk.Entry(self.root)
        self.data_emprestimo_entry.grid(row=9, column=1)

        tk.Label(self.root, text="Nome do Usuário:").grid(row=10, column=0)
        self.nome_usuario_entry = tk.Entry(self.root)
        self.nome_usuario_entry.grid(row=10, column=1)

        tk.Label(self.root, text="Telefone:").grid(row=11, column=0)
        self.telefone_entry = tk.Entry(self.root)
        self.telefone_entry.grid(row=11, column=1)

        tk.Button(self.root, text="Registrar Empréstimo", command=self.registrar_emprestimo).grid(row=12, column=0, columnspan=2)
        tk.Button(self.root, text="Devolver Livro", command=self.devolver_livro).grid(row=13, column=0, columnspan=2)

        tk.Label(self.root, text="Livros Não Devolvidos:").grid(row=14, column=0, columnspan=2)
        self.livros_nao_devolvidos_listbox = tk.Listbox(self.root, width=50)
        self.livros_nao_devolvidos_listbox.grid(row=15, column=0, columnspan=2)

    def mostrar_mensagem(self, titulo, mensagem):
        messagebox.showinfo(titulo, mensagem)

    def limpar_campos(self):
        self.nome_entry.delete(0, tk.END)
        self.nacionalidade_entry.delete(0, tk.END)
        self.titulo_entry.delete(0, tk.END)
        self.ano_entry.delete(0, tk.END)
        self.genero_entry.delete(0, tk.END)
        self.data_emprestimo_entry.delete(0, tk.END)
        self.nome_usuario_entry.delete(0, tk.END)
        self.telefone_entry.delete(0, tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = BibliotecaApp(root)
    root.mainloop()
